// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: test.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClientClient is the client API for TestClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClientClient interface {
	UserTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
	CheckTestResult(ctx context.Context, in *TestInfoReq, opts ...grpc.CallOption) (*TestInfoResp, error)
}

type testClientClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClientClient(cc grpc.ClientConnInterface) TestClientClient {
	return &testClientClient{cc}
}

func (c *testClientClient) UserTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := c.cc.Invoke(ctx, "/test.TestClient/UserTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClientClient) CheckTestResult(ctx context.Context, in *TestInfoReq, opts ...grpc.CallOption) (*TestInfoResp, error) {
	out := new(TestInfoResp)
	err := c.cc.Invoke(ctx, "/test.TestClient/CheckTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestClientServer is the server API for TestClient service.
// All implementations must embed UnimplementedTestClientServer
// for forward compatibility
type TestClientServer interface {
	UserTest(context.Context, *TestReq) (*TestResp, error)
	CheckTestResult(context.Context, *TestInfoReq) (*TestInfoResp, error)
	mustEmbedUnimplementedTestClientServer()
}

// UnimplementedTestClientServer must be embedded to have forward compatible implementations.
type UnimplementedTestClientServer struct {
}

func (UnimplementedTestClientServer) UserTest(context.Context, *TestReq) (*TestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTest not implemented")
}
func (UnimplementedTestClientServer) CheckTestResult(context.Context, *TestInfoReq) (*TestInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTestResult not implemented")
}
func (UnimplementedTestClientServer) mustEmbedUnimplementedTestClientServer() {}

// UnsafeTestClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestClientServer will
// result in compilation errors.
type UnsafeTestClientServer interface {
	mustEmbedUnimplementedTestClientServer()
}

func RegisterTestClientServer(s grpc.ServiceRegistrar, srv TestClientServer) {
	s.RegisterService(&TestClient_ServiceDesc, srv)
}

func _TestClient_UserTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestClientServer).UserTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestClient/UserTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestClientServer).UserTest(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestClient_CheckTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestClientServer).CheckTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestClient/CheckTestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestClientServer).CheckTestResult(ctx, req.(*TestInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestClient_ServiceDesc is the grpc.ServiceDesc for TestClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestClient",
	HandlerType: (*TestClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserTest",
			Handler:    _TestClient_UserTest_Handler,
		},
		{
			MethodName: "CheckTestResult",
			Handler:    _TestClient_CheckTestResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
