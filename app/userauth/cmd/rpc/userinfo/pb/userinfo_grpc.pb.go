// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: userinfo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserInfoClient_GetUserType_FullMethodName = "/userinfo.userInfoClient/GetUserType"
)

// UserInfoClientClient is the client API for UserInfoClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoClientClient interface {
	GetUserType(ctx context.Context, in *GetUserTypeReq, opts ...grpc.CallOption) (*GetUserTypeResp, error)
}

type userInfoClientClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoClientClient(cc grpc.ClientConnInterface) UserInfoClientClient {
	return &userInfoClientClient{cc}
}

func (c *userInfoClientClient) GetUserType(ctx context.Context, in *GetUserTypeReq, opts ...grpc.CallOption) (*GetUserTypeResp, error) {
	out := new(GetUserTypeResp)
	err := c.cc.Invoke(ctx, UserInfoClient_GetUserType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoClientServer is the server API for UserInfoClient service.
// All implementations must embed UnimplementedUserInfoClientServer
// for forward compatibility
type UserInfoClientServer interface {
	GetUserType(context.Context, *GetUserTypeReq) (*GetUserTypeResp, error)
	mustEmbedUnimplementedUserInfoClientServer()
}

// UnimplementedUserInfoClientServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoClientServer struct {
}

func (UnimplementedUserInfoClientServer) GetUserType(context.Context, *GetUserTypeReq) (*GetUserTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserType not implemented")
}
func (UnimplementedUserInfoClientServer) mustEmbedUnimplementedUserInfoClientServer() {}

// UnsafeUserInfoClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoClientServer will
// result in compilation errors.
type UnsafeUserInfoClientServer interface {
	mustEmbedUnimplementedUserInfoClientServer()
}

func RegisterUserInfoClientServer(s grpc.ServiceRegistrar, srv UserInfoClientServer) {
	s.RegisterService(&UserInfoClient_ServiceDesc, srv)
}

func _UserInfoClient_GetUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoClientServer).GetUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfoClient_GetUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoClientServer).GetUserType(ctx, req.(*GetUserTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfoClient_ServiceDesc is the grpc.ServiceDesc for UserInfoClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfoClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userinfo.userInfoClient",
	HandlerType: (*UserInfoClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserType",
			Handler:    _UserInfoClient_GetUserType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userinfo.proto",
}
