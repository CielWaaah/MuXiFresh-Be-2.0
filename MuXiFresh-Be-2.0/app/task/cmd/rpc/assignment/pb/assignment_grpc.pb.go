// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: assignment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssignmentClient_GetAssignmentList_FullMethodName = "/assignment.assignmentClient/GetAssignmentList"
	AssignmentClient_GetAssignmentInfo_FullMethodName = "/assignment.assignmentClient/GetAssignmentInfo"
	AssignmentClient_SetAssignment_FullMethodName     = "/assignment.assignmentClient/SetAssignment"
)

// AssignmentClientClient is the client API for AssignmentClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentClientClient interface {
	GetAssignmentList(ctx context.Context, in *GetAssignmentListReq, opts ...grpc.CallOption) (*GetAssignmentListResp, error)
	GetAssignmentInfo(ctx context.Context, in *GetAssignmentInfoReq, opts ...grpc.CallOption) (*GetAssignmentInfoResp, error)
	SetAssignment(ctx context.Context, in *SetAssignmentReq, opts ...grpc.CallOption) (*SetAssignmentResp, error)
}

type assignmentClientClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentClientClient(cc grpc.ClientConnInterface) AssignmentClientClient {
	return &assignmentClientClient{cc}
}

func (c *assignmentClientClient) GetAssignmentList(ctx context.Context, in *GetAssignmentListReq, opts ...grpc.CallOption) (*GetAssignmentListResp, error) {
	out := new(GetAssignmentListResp)
	err := c.cc.Invoke(ctx, AssignmentClient_GetAssignmentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClientClient) GetAssignmentInfo(ctx context.Context, in *GetAssignmentInfoReq, opts ...grpc.CallOption) (*GetAssignmentInfoResp, error) {
	out := new(GetAssignmentInfoResp)
	err := c.cc.Invoke(ctx, AssignmentClient_GetAssignmentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClientClient) SetAssignment(ctx context.Context, in *SetAssignmentReq, opts ...grpc.CallOption) (*SetAssignmentResp, error) {
	out := new(SetAssignmentResp)
	err := c.cc.Invoke(ctx, AssignmentClient_SetAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentClientServer is the server API for AssignmentClient service.
// All implementations must embed UnimplementedAssignmentClientServer
// for forward compatibility
type AssignmentClientServer interface {
	GetAssignmentList(context.Context, *GetAssignmentListReq) (*GetAssignmentListResp, error)
	GetAssignmentInfo(context.Context, *GetAssignmentInfoReq) (*GetAssignmentInfoResp, error)
	SetAssignment(context.Context, *SetAssignmentReq) (*SetAssignmentResp, error)
	mustEmbedUnimplementedAssignmentClientServer()
}

// UnimplementedAssignmentClientServer must be embedded to have forward compatible implementations.
type UnimplementedAssignmentClientServer struct {
}

func (UnimplementedAssignmentClientServer) GetAssignmentList(context.Context, *GetAssignmentListReq) (*GetAssignmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentList not implemented")
}
func (UnimplementedAssignmentClientServer) GetAssignmentInfo(context.Context, *GetAssignmentInfoReq) (*GetAssignmentInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentInfo not implemented")
}
func (UnimplementedAssignmentClientServer) SetAssignment(context.Context, *SetAssignmentReq) (*SetAssignmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssignment not implemented")
}
func (UnimplementedAssignmentClientServer) mustEmbedUnimplementedAssignmentClientServer() {}

// UnsafeAssignmentClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentClientServer will
// result in compilation errors.
type UnsafeAssignmentClientServer interface {
	mustEmbedUnimplementedAssignmentClientServer()
}

func RegisterAssignmentClientServer(s grpc.ServiceRegistrar, srv AssignmentClientServer) {
	s.RegisterService(&AssignmentClient_ServiceDesc, srv)
}

func _AssignmentClient_GetAssignmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentClientServer).GetAssignmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentClient_GetAssignmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentClientServer).GetAssignmentList(ctx, req.(*GetAssignmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentClient_GetAssignmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentClientServer).GetAssignmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentClient_GetAssignmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentClientServer).GetAssignmentInfo(ctx, req.(*GetAssignmentInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentClient_SetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentClientServer).SetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentClient_SetAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentClientServer).SetAssignment(ctx, req.(*SetAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignmentClient_ServiceDesc is the grpc.ServiceDesc for AssignmentClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignmentClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assignment.assignmentClient",
	HandlerType: (*AssignmentClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssignmentList",
			Handler:    _AssignmentClient_GetAssignmentList_Handler,
		},
		{
			MethodName: "GetAssignmentInfo",
			Handler:    _AssignmentClient_GetAssignmentInfo_Handler,
		},
		{
			MethodName: "SetAssignment",
			Handler:    _AssignmentClient_SetAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assignment.proto",
}
