// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: comment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentClient_GetSubmissionComment_FullMethodName = "/comment.commentClient/GetSubmissionComment"
	CommentClient_SetSubmissionComment_FullMethodName = "/comment.commentClient/SetSubmissionComment"
	CommentClient_DelSubmissionComment_FullMethodName = "/comment.commentClient/DelSubmissionComment"
	CommentClient_IsMyComment_FullMethodName          = "/comment.commentClient/IsMyComment"
)

// CommentClientClient is the client API for CommentClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentClientClient interface {
	GetSubmissionComment(ctx context.Context, in *GetSubmissionCommentReq, opts ...grpc.CallOption) (*GetSubmissionCommentResp, error)
	SetSubmissionComment(ctx context.Context, in *SetSubmissionCommentReq, opts ...grpc.CallOption) (*SetSubmissionCommentResp, error)
	DelSubmissionComment(ctx context.Context, in *DelSubmissionCommentReq, opts ...grpc.CallOption) (*DelSubmissionCommentResp, error)
	IsMyComment(ctx context.Context, in *IsMyCommentReq, opts ...grpc.CallOption) (*IsMyCommentResp, error)
}

type commentClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClientClient(cc grpc.ClientConnInterface) CommentClientClient {
	return &commentClientClient{cc}
}

func (c *commentClientClient) GetSubmissionComment(ctx context.Context, in *GetSubmissionCommentReq, opts ...grpc.CallOption) (*GetSubmissionCommentResp, error) {
	out := new(GetSubmissionCommentResp)
	err := c.cc.Invoke(ctx, CommentClient_GetSubmissionComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClientClient) SetSubmissionComment(ctx context.Context, in *SetSubmissionCommentReq, opts ...grpc.CallOption) (*SetSubmissionCommentResp, error) {
	out := new(SetSubmissionCommentResp)
	err := c.cc.Invoke(ctx, CommentClient_SetSubmissionComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClientClient) DelSubmissionComment(ctx context.Context, in *DelSubmissionCommentReq, opts ...grpc.CallOption) (*DelSubmissionCommentResp, error) {
	out := new(DelSubmissionCommentResp)
	err := c.cc.Invoke(ctx, CommentClient_DelSubmissionComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClientClient) IsMyComment(ctx context.Context, in *IsMyCommentReq, opts ...grpc.CallOption) (*IsMyCommentResp, error) {
	out := new(IsMyCommentResp)
	err := c.cc.Invoke(ctx, CommentClient_IsMyComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentClientServer is the server API for CommentClient service.
// All implementations must embed UnimplementedCommentClientServer
// for forward compatibility
type CommentClientServer interface {
	GetSubmissionComment(context.Context, *GetSubmissionCommentReq) (*GetSubmissionCommentResp, error)
	SetSubmissionComment(context.Context, *SetSubmissionCommentReq) (*SetSubmissionCommentResp, error)
	DelSubmissionComment(context.Context, *DelSubmissionCommentReq) (*DelSubmissionCommentResp, error)
	IsMyComment(context.Context, *IsMyCommentReq) (*IsMyCommentResp, error)
	mustEmbedUnimplementedCommentClientServer()
}

// UnimplementedCommentClientServer must be embedded to have forward compatible implementations.
type UnimplementedCommentClientServer struct {
}

func (UnimplementedCommentClientServer) GetSubmissionComment(context.Context, *GetSubmissionCommentReq) (*GetSubmissionCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionComment not implemented")
}
func (UnimplementedCommentClientServer) SetSubmissionComment(context.Context, *SetSubmissionCommentReq) (*SetSubmissionCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubmissionComment not implemented")
}
func (UnimplementedCommentClientServer) DelSubmissionComment(context.Context, *DelSubmissionCommentReq) (*DelSubmissionCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSubmissionComment not implemented")
}
func (UnimplementedCommentClientServer) IsMyComment(context.Context, *IsMyCommentReq) (*IsMyCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMyComment not implemented")
}
func (UnimplementedCommentClientServer) mustEmbedUnimplementedCommentClientServer() {}

// UnsafeCommentClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentClientServer will
// result in compilation errors.
type UnsafeCommentClientServer interface {
	mustEmbedUnimplementedCommentClientServer()
}

func RegisterCommentClientServer(s grpc.ServiceRegistrar, srv CommentClientServer) {
	s.RegisterService(&CommentClient_ServiceDesc, srv)
}

func _CommentClient_GetSubmissionComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentClientServer).GetSubmissionComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentClient_GetSubmissionComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentClientServer).GetSubmissionComment(ctx, req.(*GetSubmissionCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentClient_SetSubmissionComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubmissionCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentClientServer).SetSubmissionComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentClient_SetSubmissionComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentClientServer).SetSubmissionComment(ctx, req.(*SetSubmissionCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentClient_DelSubmissionComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSubmissionCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentClientServer).DelSubmissionComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentClient_DelSubmissionComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentClientServer).DelSubmissionComment(ctx, req.(*DelSubmissionCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentClient_IsMyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMyCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentClientServer).IsMyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentClient_IsMyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentClientServer).IsMyComment(ctx, req.(*IsMyCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentClient_ServiceDesc is the grpc.ServiceDesc for CommentClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.commentClient",
	HandlerType: (*CommentClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubmissionComment",
			Handler:    _CommentClient_GetSubmissionComment_Handler,
		},
		{
			MethodName: "SetSubmissionComment",
			Handler:    _CommentClient_SetSubmissionComment_Handler,
		},
		{
			MethodName: "DelSubmissionComment",
			Handler:    _CommentClient_DelSubmissionComment_Handler,
		},
		{
			MethodName: "IsMyComment",
			Handler:    _CommentClient_IsMyComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
