// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: submission.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubmissionClient_GetMySubmissionStatus_FullMethodName  = "/submission.submissionClient/GetMySubmissionStatus"
	SubmissionClient_SetSubmission_FullMethodName          = "/submission.submissionClient/SetSubmission"
	SubmissionClient_GetSubmissionInfo_FullMethodName      = "/submission.submissionClient/GetSubmissionInfo"
	SubmissionClient_GetAllSubmissionStatus_FullMethodName = "/submission.submissionClient/GetAllSubmissionStatus"
)

// SubmissionClientClient is the client API for SubmissionClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionClientClient interface {
	GetMySubmissionStatus(ctx context.Context, in *GetMySubmissionStatusReq, opts ...grpc.CallOption) (*GetMySubmissionStatusResp, error)
	SetSubmission(ctx context.Context, in *SetSubmissionReq, opts ...grpc.CallOption) (*SetSubmissionResp, error)
	GetSubmissionInfo(ctx context.Context, in *GetSubmissionInfoReq, opts ...grpc.CallOption) (*GetSubmissionInfoResp, error)
	GetAllSubmissionStatus(ctx context.Context, in *GetAllSubmissionStatusReq, opts ...grpc.CallOption) (*GetAllSubmissionStatusResp, error)
}

type submissionClientClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionClientClient(cc grpc.ClientConnInterface) SubmissionClientClient {
	return &submissionClientClient{cc}
}

func (c *submissionClientClient) GetMySubmissionStatus(ctx context.Context, in *GetMySubmissionStatusReq, opts ...grpc.CallOption) (*GetMySubmissionStatusResp, error) {
	out := new(GetMySubmissionStatusResp)
	err := c.cc.Invoke(ctx, SubmissionClient_GetMySubmissionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionClientClient) SetSubmission(ctx context.Context, in *SetSubmissionReq, opts ...grpc.CallOption) (*SetSubmissionResp, error) {
	out := new(SetSubmissionResp)
	err := c.cc.Invoke(ctx, SubmissionClient_SetSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionClientClient) GetSubmissionInfo(ctx context.Context, in *GetSubmissionInfoReq, opts ...grpc.CallOption) (*GetSubmissionInfoResp, error) {
	out := new(GetSubmissionInfoResp)
	err := c.cc.Invoke(ctx, SubmissionClient_GetSubmissionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionClientClient) GetAllSubmissionStatus(ctx context.Context, in *GetAllSubmissionStatusReq, opts ...grpc.CallOption) (*GetAllSubmissionStatusResp, error) {
	out := new(GetAllSubmissionStatusResp)
	err := c.cc.Invoke(ctx, SubmissionClient_GetAllSubmissionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmissionClientServer is the server API for SubmissionClient service.
// All implementations must embed UnimplementedSubmissionClientServer
// for forward compatibility
type SubmissionClientServer interface {
	GetMySubmissionStatus(context.Context, *GetMySubmissionStatusReq) (*GetMySubmissionStatusResp, error)
	SetSubmission(context.Context, *SetSubmissionReq) (*SetSubmissionResp, error)
	GetSubmissionInfo(context.Context, *GetSubmissionInfoReq) (*GetSubmissionInfoResp, error)
	GetAllSubmissionStatus(context.Context, *GetAllSubmissionStatusReq) (*GetAllSubmissionStatusResp, error)
	mustEmbedUnimplementedSubmissionClientServer()
}

// UnimplementedSubmissionClientServer must be embedded to have forward compatible implementations.
type UnimplementedSubmissionClientServer struct {
}

func (UnimplementedSubmissionClientServer) GetMySubmissionStatus(context.Context, *GetMySubmissionStatusReq) (*GetMySubmissionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySubmissionStatus not implemented")
}
func (UnimplementedSubmissionClientServer) SetSubmission(context.Context, *SetSubmissionReq) (*SetSubmissionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubmission not implemented")
}
func (UnimplementedSubmissionClientServer) GetSubmissionInfo(context.Context, *GetSubmissionInfoReq) (*GetSubmissionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionInfo not implemented")
}
func (UnimplementedSubmissionClientServer) GetAllSubmissionStatus(context.Context, *GetAllSubmissionStatusReq) (*GetAllSubmissionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubmissionStatus not implemented")
}
func (UnimplementedSubmissionClientServer) mustEmbedUnimplementedSubmissionClientServer() {}

// UnsafeSubmissionClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionClientServer will
// result in compilation errors.
type UnsafeSubmissionClientServer interface {
	mustEmbedUnimplementedSubmissionClientServer()
}

func RegisterSubmissionClientServer(s grpc.ServiceRegistrar, srv SubmissionClientServer) {
	s.RegisterService(&SubmissionClient_ServiceDesc, srv)
}

func _SubmissionClient_GetMySubmissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySubmissionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionClientServer).GetMySubmissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionClient_GetMySubmissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionClientServer).GetMySubmissionStatus(ctx, req.(*GetMySubmissionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionClient_SetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubmissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionClientServer).SetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionClient_SetSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionClientServer).SetSubmission(ctx, req.(*SetSubmissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionClient_GetSubmissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionClientServer).GetSubmissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionClient_GetSubmissionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionClientServer).GetSubmissionInfo(ctx, req.(*GetSubmissionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionClient_GetAllSubmissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubmissionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionClientServer).GetAllSubmissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionClient_GetAllSubmissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionClientServer).GetAllSubmissionStatus(ctx, req.(*GetAllSubmissionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmissionClient_ServiceDesc is the grpc.ServiceDesc for SubmissionClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submission.submissionClient",
	HandlerType: (*SubmissionClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMySubmissionStatus",
			Handler:    _SubmissionClient_GetMySubmissionStatus_Handler,
		},
		{
			MethodName: "SetSubmission",
			Handler:    _SubmissionClient_SetSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionInfo",
			Handler:    _SubmissionClient_GetSubmissionInfo_Handler,
		},
		{
			MethodName: "GetAllSubmissionStatus",
			Handler:    _SubmissionClient_GetAllSubmissionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submission.proto",
}
