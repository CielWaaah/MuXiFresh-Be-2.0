// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserClient_GetUserInfo_FullMethodName  = "/user.userClient/GetUserInfo"
	UserClient_SetUserInfo_FullMethodName  = "/user.userClient/SetUserInfo"
	UserClient_SetUserType_FullMethodName  = "/user.userClient/SetUserType"
	UserClient_GetAdminList_FullMethodName = "/user.userClient/GetAdminList"
	UserClient_GetUserType_FullMethodName  = "/user.userClient/GetUserType"
)

// UserClientClient is the client API for UserClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClientClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error)
	SetUserType(ctx context.Context, in *SetUserTypeReq, opts ...grpc.CallOption) (*SetUserTypeResp, error)
	GetAdminList(ctx context.Context, in *GetAdminListReq, opts ...grpc.CallOption) (*GetAdminListResp, error)
	GetUserType(ctx context.Context, in *GetUserTypeReq, opts ...grpc.CallOption) (*GetUserTypeResp, error)
}

type userClientClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClientClient(cc grpc.ClientConnInterface) UserClientClient {
	return &userClientClient{cc}
}

func (c *userClientClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, UserClient_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*SetUserInfoResp, error) {
	out := new(SetUserInfoResp)
	err := c.cc.Invoke(ctx, UserClient_SetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) SetUserType(ctx context.Context, in *SetUserTypeReq, opts ...grpc.CallOption) (*SetUserTypeResp, error) {
	out := new(SetUserTypeResp)
	err := c.cc.Invoke(ctx, UserClient_SetUserType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) GetAdminList(ctx context.Context, in *GetAdminListReq, opts ...grpc.CallOption) (*GetAdminListResp, error) {
	out := new(GetAdminListResp)
	err := c.cc.Invoke(ctx, UserClient_GetAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClientClient) GetUserType(ctx context.Context, in *GetUserTypeReq, opts ...grpc.CallOption) (*GetUserTypeResp, error) {
	out := new(GetUserTypeResp)
	err := c.cc.Invoke(ctx, UserClient_GetUserType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserClientServer is the server API for UserClient service.
// All implementations must embed UnimplementedUserClientServer
// for forward compatibility
type UserClientServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	SetUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error)
	SetUserType(context.Context, *SetUserTypeReq) (*SetUserTypeResp, error)
	GetAdminList(context.Context, *GetAdminListReq) (*GetAdminListResp, error)
	GetUserType(context.Context, *GetUserTypeReq) (*GetUserTypeResp, error)
	mustEmbedUnimplementedUserClientServer()
}

// UnimplementedUserClientServer must be embedded to have forward compatible implementations.
type UnimplementedUserClientServer struct {
}

func (UnimplementedUserClientServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserClientServer) SetUserInfo(context.Context, *SetUserInfoReq) (*SetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserInfo not implemented")
}
func (UnimplementedUserClientServer) SetUserType(context.Context, *SetUserTypeReq) (*SetUserTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserType not implemented")
}
func (UnimplementedUserClientServer) GetAdminList(context.Context, *GetAdminListReq) (*GetAdminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminList not implemented")
}
func (UnimplementedUserClientServer) GetUserType(context.Context, *GetUserTypeReq) (*GetUserTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserType not implemented")
}
func (UnimplementedUserClientServer) mustEmbedUnimplementedUserClientServer() {}

// UnsafeUserClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserClientServer will
// result in compilation errors.
type UnsafeUserClientServer interface {
	mustEmbedUnimplementedUserClientServer()
}

func RegisterUserClientServer(s grpc.ServiceRegistrar, srv UserClientServer) {
	s.RegisterService(&UserClient_ServiceDesc, srv)
}

func _UserClient_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClient_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClient_SetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).SetUserInfo(ctx, req.(*SetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_SetUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).SetUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClient_SetUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).SetUserType(ctx, req.(*SetUserTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_GetAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).GetAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClient_GetAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).GetAdminList(ctx, req.(*GetAdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserClient_GetUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserClientServer).GetUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserClient_GetUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserClientServer).GetUserType(ctx, req.(*GetUserTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserClient_ServiceDesc is the grpc.ServiceDesc for UserClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.userClient",
	HandlerType: (*UserClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserClient_GetUserInfo_Handler,
		},
		{
			MethodName: "SetUserInfo",
			Handler:    _UserClient_SetUserInfo_Handler,
		},
		{
			MethodName: "SetUserType",
			Handler:    _UserClient_SetUserType_Handler,
		},
		{
			MethodName: "GetAdminList",
			Handler:    _UserClient_GetAdminList_Handler,
		},
		{
			MethodName: "GetUserType",
			Handler:    _UserClient_GetUserType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
