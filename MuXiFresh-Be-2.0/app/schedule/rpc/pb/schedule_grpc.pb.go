// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: schedule.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleClient_Check_FullMethodName  = "/schedule.ScheduleClient/Check"
	ScheduleClient_Create_FullMethodName = "/schedule.ScheduleClient/Create"
)

// ScheduleClientClient is the client API for ScheduleClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClientClient interface {
	Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
}

type scheduleClientClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClientClient(cc grpc.ClientConnInterface) ScheduleClientClient {
	return &scheduleClientClient{cc}
}

func (c *scheduleClientClient) Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error) {
	out := new(CheckResp)
	err := c.cc.Invoke(ctx, ScheduleClient_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClientClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, ScheduleClient_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleClientServer is the server API for ScheduleClient service.
// All implementations must embed UnimplementedScheduleClientServer
// for forward compatibility
type ScheduleClientServer interface {
	Check(context.Context, *CheckReq) (*CheckResp, error)
	Create(context.Context, *CreateReq) (*CreateResp, error)
	mustEmbedUnimplementedScheduleClientServer()
}

// UnimplementedScheduleClientServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleClientServer struct {
}

func (UnimplementedScheduleClientServer) Check(context.Context, *CheckReq) (*CheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedScheduleClientServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScheduleClientServer) mustEmbedUnimplementedScheduleClientServer() {}

// UnsafeScheduleClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleClientServer will
// result in compilation errors.
type UnsafeScheduleClientServer interface {
	mustEmbedUnimplementedScheduleClientServer()
}

func RegisterScheduleClientServer(s grpc.ServiceRegistrar, srv ScheduleClientServer) {
	s.RegisterService(&ScheduleClient_ServiceDesc, srv)
}

func _ScheduleClient_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClientServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleClient_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClientServer).Check(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleClient_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClientServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleClient_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClientServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleClient_ServiceDesc is the grpc.ServiceDesc for ScheduleClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.ScheduleClient",
	HandlerType: (*ScheduleClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ScheduleClient_Check_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ScheduleClient_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
